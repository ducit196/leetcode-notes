from collections import deque
from typing import List


class Solution:
    #TC: O(m * n)
    #SC: O(m * n)
    def numberIslands(self, grid: List[List[str]]) ->int:
        #Start from 1 point, travel top,down,left,right. When nothing else to travel --> 1 island
        directions = {(-1,0), (1, 0), (0, -1), (0, 1)}
        m = len(grid)
        n = len(grid[0])
        ans = 0
        #Using BFS to traverse all cell of island
        visited = set()
        def bfs(i: int, j: int):
            print(i, j)
            q = deque()
            q.append((i, j)) #add start element to queue
            while q:
                x, y = q.popleft();
                if (x, y) not in visited:
                    visited.add((x, y))
                    for (dx, dy) in directions:
                        xNeighbor = x + dx
                        yNeighbor = y + dy
                        if 0 <= xNeighbor < m and 0 <= yNeighbor < n and (xNeighbor, yNeighbor) not in visited and grid[xNeighbor][yNeighbor] == '1' :
                            q.append((xNeighbor, yNeighbor))
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1' and (i, j) not in visited:
                    ans += 1
                    bfs(i, j)
        return ans
grid = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]
ans = Solution().numberIslands(grid)
print(ans)