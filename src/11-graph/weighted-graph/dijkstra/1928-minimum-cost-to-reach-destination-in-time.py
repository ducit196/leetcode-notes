import math
from heapq import heappop, heappush
from typing import List


class Solution:
    def minCost(self, maxTime: int, edges: List[List[int]], passingFees: List[int]) -> int:
        # dijitstrak, process with min cost
        n = len(passingFees)
        print(n)
        adjList = [[] for i in range(n)]

        for u, v, w in edges:
            adjList[u].append((v, w))
            adjList[v].append((u, w))

        d = [math.inf] * n
        d[0] = 0
        q = [(passingFees[0], 0, 0)]
        visited = set()
        while q:
            f, w, u = heappop(q)
            if u in visited:
                continue
            visited.add(u)
            if u == n - 1:
                return f
            for nei, wNei in adjList[u]:
                newTime = d[u] + wNei
                newFee = f + passingFees[nei]
                if newTime <= maxTime and newTime < d[nei]:
                    d[nei] = newTime
                    heappush(q, (newFee, newTime, nei))
        return -1
maxTime = 30
edges = [[2,0,25],[9,3,29],[27,47,30],[14,10,33],[12,6,31],[25,7,4],[21,7,9],[19,17,4],[39,20,7],[49,43,8],[42,48,33],[47,31,34],[34,2,14],[14,4,45],[8,1,50],[46,1,44],[47,21,24],[35,16,9],[46,2,25],[32,1,9],[46,8,6],[43,19,20],[4,1,20],[13,10,1],[22,46,10],[12,20,13],[29,6,28],[5,2,36],[3,5,16],[8,9,27],[16,11,12],[10,19,48],[28,22,3],[3,1,35],[30,10,48],[26,7,8],[32,28,30],[30,17,4],[6,4,8],[23,6,46],[31,13,29],[1,0,20],[9,5,34],[25,37,23],[18,17,13],[9,19,33],[49,11,43],[41,14,13],[27,11,5],[11,1,2],[24,11,32],[2,25,17],[37,6,49],[36,33,49],[44,42,50],[5,1,20],[44,7,1],[22,13,45],[15,7,31],[6,44,47],[10,6,41],[36,16,39],[17,36,12],[10,26,27],[19,16,48],[8,47,25],[2,29,33],[37,35,33],[45,23,15],[0,7,25],[31,20,46],[38,26,13],[7,2,34],[18,26,30],[47,7,40],[14,38,23],[16,15,45],[20,47,7],[18,44,24],[17,6,31],[20,17,42],[27,26,2],[29,27,2],[42,24,13],[18,16,21],[10,12,28],[29,36,23],[44,36,49],[24,31,30],[26,33,50],[48,17,20],[47,15,39],[34,3,14],[33,28,24],[6,41,35],[40,0,48],[16,38,4]]
passingFees = [933,997,534,65,437,375,946,644,849,154,801,472,416,627,336,698,289,511,998,569,80,543,139,19,648,91,905,991,211,624,610,881,714,373,492,528,152,788,877,179,929,720,136,435,778,47,77,365,654,759]
print(Solution().minCost(maxTime, edges, passingFees))